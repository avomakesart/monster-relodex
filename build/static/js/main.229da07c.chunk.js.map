{"version":3,"sources":["components/card-list/card-list.styles.jsx","components/card/card.styles.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.styles.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledCardList","styled","div","CardContainer","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchInput","input","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","setState","target","value","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4dACO,IAAMA,EAAiBC,IAAOC,IAAV,K,waCCpB,IAAMC,EAAgBF,IAAOC,IAAV,KCCbE,EAAO,SAAAC,GAClB,OACE,kBAACF,EAAD,KACE,yBACEG,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,0BACHC,IAAI,YAEN,4BAAKJ,EAAME,QAAQG,MACnB,2BAAIL,EAAME,QAAQI,SCPXC,EAAW,SAAAP,GACtB,OACE,kBAACL,EAAD,KACGK,EAAMQ,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,S,wNCNjC,IAAMS,EAAcf,IAAOgB,MAAV,KCCXC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,kBAACJ,EAAD,CACEK,KAAK,SACLF,YAAaA,EACbG,SAAUF,KCkCCG,E,2MAnCbC,MAAQ,CACNX,SAAU,GACVY,YAAa,I,EAWfL,aAAe,SAACM,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,mFAPnB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEd,SAAUqB,S,+BAOnC,IAAD,EAC2BC,KAAKX,MAA/BX,EADD,EACCA,SAAUY,EADX,EACWA,YACZW,EAAmBvB,EAASwB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQG,KAAK4B,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAKE,UAAU,OACb,+CACA,kBAAC,EAAD,CACErB,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUP,SAAUuB,S,GA9BVK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.229da07c.chunk.js","sourcesContent":["import styled from \"styled-components\";\nexport const StyledCardList = styled.div`\n  width: 85vw;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-gap: 20px;\n`;\n","import styled from \"styled-components\";\n\nexport const CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #95dada;\n  border: 1px solid grey;\n  border-radius: 5px;\n  padding: 25px;\n  cursor: pointer;\n  -moz-osx-font-smoothing: grayscale;\n  backface-visibility: hidden;\n  transform: translateZ(0);\n  transition: transform 0.25s ease-out;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n","import React from \"react\";\nimport { CardContainer } from \"./card.styles\";\n\nexport const Card = props => {\n  return (\n    <CardContainer>\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt=\"monster\"\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </CardContainer>\n  );\n};\n","import React from \"react\";\nimport { StyledCardList } from \"./card-list.styles\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = props => {\n  return (\n    <StyledCardList>\n      {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </StyledCardList>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const SearchInput = styled.input`\n  -webkit-appearance: none;\n  border: none;\n  outline: none;\n  padding: 10px;\n  width: 150px;\n  line-height: 30px;\n  margin-bottom: 30px;\n`;\n","import React from \"react\";\nimport { SearchInput } from \"./search-box.styles\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <SearchInput\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\"\n  };\n\n  // handleChange = this.handleChange.bind(this);\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monster Relodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}